#pragma once

#include <SpheresEngine/VectorTypes.h>
#include <SpheresEngine/InputEngine/Input.h>
#include <SpheresEngine/InputEngine/InputTransformer.h>
#include <SpheresEngine/InputEngine/InputSource.h>
#include <SpheresEngine/Signals.h>
#include <SpheresEngine/Util.h>

#include <memory>
#include <vector>
#include <cassert>

/**
 * This engine maintains a list of input sources which read out input devices and generate (hardware) specific
 * Input objects. It then runs a list of transformers on this input to generate device-indepent, but game-specific
 * actions which can then be used by game aspects to react on the game logic level.
 */
class InputEngine {
public:

	/**
	 * typedef to store owning of input actions
	 */
	typedef std::vector<uniq<InputAction>> InputActionList;

	/**
	 * add a new input source to retrieve user input from.
	 * @return a non-owning pointer to the InputSource
	 */
	InputSource * addSource(uniq<InputSource> src) {
		auto tmpPtr = src.get();
		m_sources.emplace_back(std::move(src));
		return tmpPtr;
	}

	/**
	 * Add a transformer which is executed no each input object to get device-abstract InputActions
	 */
	void addTransformer(uniq<InputTransformer> intTrans) {
		m_transformers.push_back(std::move(intTrans));
	}

	/**
	 * Process input-related business, will be called every time step
	 */
	void process();

	/**
	 * return a list of generated input actions
	 */
	InputActionList & getInputActions() {
		return m_inputActions;
	}

	/**
	 * clear the list of input actions that have been buffered
	 */
	void clearInputActions() {
		m_inputActions.clear();
	}

	/**
	 * sends signal every time a new input action has been created by one of the
	 * Transformers
	 */
	slots::Slot<InputAction *> OnNewInputAction;

private:
	/**
	 * The input sources added to this engine
	 */
	std::vector<uniq<InputSource>> m_sources;

	/**
	 * The input transformers added to this engine
	 */
	std::vector<uniq<InputTransformer>> m_transformers;

	/**
	 * The input actions which have been generated by the transformers since the
	 * last call to clearInputActions()
	 */
	InputActionList m_inputActions;
};
